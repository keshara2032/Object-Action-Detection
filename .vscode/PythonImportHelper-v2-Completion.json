[
    {
        "label": "*",
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "isExtraImport": true,
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ems_knowledge",
        "description": "ems_knowledge",
        "isExtraImport": true,
        "detail": "ems_knowledge",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torchvision",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torchvision",
        "description": "torchvision",
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Roboflow",
        "importPath": "roboflow",
        "description": "roboflow",
        "isExtraImport": true,
        "detail": "roboflow",
        "documentation": {}
    },
    {
        "label": "cv_ecg_12_lead",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "cv_ecg_12_lead = [\"An ECG monitor\",\"Attaching Twelve ECG leads on chest\"]\ncv_defibrillation_manual = [\"Defibrillator\",\"Attaching two Defib pads on chest\"]\ncpr_manual = []\nadv_airway_capnography = []\nadmin_epi = []\n# respiratory distress\nresp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "cv_defibrillation_manual",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "cv_defibrillation_manual = [\"Defibrillator\",\"Attaching two Defib pads on chest\"]\ncpr_manual = []\nadv_airway_capnography = []\nadmin_epi = []\n# respiratory distress\nresp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "cpr_manual",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "cpr_manual = []\nadv_airway_capnography = []\nadmin_epi = []\n# respiratory distress\nresp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "adv_airway_capnography",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "adv_airway_capnography = []\nadmin_epi = []\n# respiratory distress\nresp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "admin_epi",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "admin_epi = []\n# respiratory distress\nresp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "resp_assist_ventilation_bvm_via_mask",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "resp_assist_ventilation_bvm_via_mask = [\"BVM Mask\", \"Placing Oxygen mask on face\"]\nresp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "resp_nebulizer_therapy",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "resp_nebulizer_therapy = [\"Attaching nebulizer\", \"Nebulizer mask\"]\nresp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "resp_airway_adjunct",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "resp_airway_adjunct = [\"Inserting airway adjunct\"]\nresp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "resp_endotracheal_tube",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "resp_endotracheal_tube = [\"Inserting endotracheal tube\", \"Endotracheal intubation\"]\nresp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "resp_administer_albuterol",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "resp_administer_albuterol = [\"Administering albuterol\", \"Attaching metered dose inhaler\"]\n# general\niv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "iv_access",
        "kind": 5,
        "importPath": "ems_action_keywords",
        "description": "ems_action_keywords",
        "peekOfCode": "iv_access = [\"Inserting IV to arm\",\"Inserting IV to leg\"]",
        "detail": "ems_action_keywords",
        "documentation": {}
    },
    {
        "label": "adult_cardiact_arrest_protocol",
        "kind": 5,
        "importPath": "ems_knowledge",
        "description": "ems_knowledge",
        "peekOfCode": "adult_cardiact_arrest_protocol = {\"cv_ecg_12_lead\":cv_ecg_12_lead,\n                                  \"cv_defibrillation_manual\":cv_defibrillation_manual,\n                                  \"cpr_manual\":cpr_manual,\n                                  \"iv_access\":iv_access,\n                                  \"adv_airway_capnography\":adv_airway_capnography,\n                                  \"admin_epi\":admin_epi\n                                  }\nrespiratory_distress_protocol = {\"resp_assist_ventilation_bvm_via_mask\":resp_assist_ventilation_bvm_via_mask,\n                                 \"resp_nebulizer_therapy\":resp_nebulizer_therapy,\n                                #  \"resp_airway_adjunct\":resp_airway_adjunct,",
        "detail": "ems_knowledge",
        "documentation": {}
    },
    {
        "label": "respiratory_distress_protocol",
        "kind": 5,
        "importPath": "ems_knowledge",
        "description": "ems_knowledge",
        "peekOfCode": "respiratory_distress_protocol = {\"resp_assist_ventilation_bvm_via_mask\":resp_assist_ventilation_bvm_via_mask,\n                                 \"resp_nebulizer_therapy\":resp_nebulizer_therapy,\n                                #  \"resp_airway_adjunct\":resp_airway_adjunct,\n                                #  \"resp_endotracheal_tube\":resp_endotracheal_tube,\n                                #  \"resp_administer_albuterol\":resp_administer_albuterol,\n                                 \"iv_access\": iv_access}\nems_interventions = {\"adult_cardiact_arrest_protocol\":adult_cardiact_arrest_protocol,\n                     \"respiratory_distress_protocol\":respiratory_distress_protocol}\n# print(respiratory_distress_protocol.keys())",
        "detail": "ems_knowledge",
        "documentation": {}
    },
    {
        "label": "ems_interventions",
        "kind": 5,
        "importPath": "ems_knowledge",
        "description": "ems_knowledge",
        "peekOfCode": "ems_interventions = {\"adult_cardiact_arrest_protocol\":adult_cardiact_arrest_protocol,\n                     \"respiratory_distress_protocol\":respiratory_distress_protocol}\n# print(respiratory_distress_protocol.keys())",
        "detail": "ems_knowledge",
        "documentation": {}
    },
    {
        "label": "generate_labels",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def generate_labels(protocol):\n    return list(itertools.chain.from_iterable(list(ems_interventions.get(protocol).values())))\n# protocol = \"adult_cardiact_arrest_protocol\"\n# print(generate_labels(protocol))",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "extract_keypoints",
        "kind": 2,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "def extract_keypoints(results):\n    if(len(results.multi_hand_landmarks) > 1):\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[1].landmark]).flatten() if results.multi_hand_landmarks[1] else np.zeros(21*3)\n    else:\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.zeros(21*3)\n    return np.concatenate([ lh, rh])\ndef save_landmarks(landmarks,  path, intervention, trial):\n  df_path = os.path.join(path, intervention, trial)",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "save_landmarks",
        "kind": 2,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "def save_landmarks(landmarks,  path, intervention, trial):\n  df_path = os.path.join(path, intervention, trial)\n  print(df_path)\n  if not os.path.exists(df_path):\n    os.makedirs(df_path)\n  # print(landmarks)\n  if(intervention == 'oxygen-bvm'):\n    label = ['I0']*len(landmarks)\n  elif(intervention == 'defib-pads'):\n    label = ['I1']*len(landmarks)",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "mp_drawing",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "mp_drawing = mp.solutions.drawing_utils\nmp_drawing_styles = mp.solutions.drawing_styles\nmp_hands = mp.solutions.hands\nmp_holistic = mp.solutions.holistic # Holistic model\ndef extract_keypoints(results):\n    if(len(results.multi_hand_landmarks) > 1):\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[1].landmark]).flatten() if results.multi_hand_landmarks[1] else np.zeros(21*3)\n    else:\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "mp_drawing_styles",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "mp_drawing_styles = mp.solutions.drawing_styles\nmp_hands = mp.solutions.hands\nmp_holistic = mp.solutions.holistic # Holistic model\ndef extract_keypoints(results):\n    if(len(results.multi_hand_landmarks) > 1):\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[1].landmark]).flatten() if results.multi_hand_landmarks[1] else np.zeros(21*3)\n    else:\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.zeros(21*3)",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "mp_hands",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "mp_hands = mp.solutions.hands\nmp_holistic = mp.solutions.holistic # Holistic model\ndef extract_keypoints(results):\n    if(len(results.multi_hand_landmarks) > 1):\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[1].landmark]).flatten() if results.multi_hand_landmarks[1] else np.zeros(21*3)\n    else:\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.zeros(21*3)\n    return np.concatenate([ lh, rh])",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "mp_holistic",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "mp_holistic = mp.solutions.holistic # Holistic model\ndef extract_keypoints(results):\n    if(len(results.multi_hand_landmarks) > 1):\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[1].landmark]).flatten() if results.multi_hand_landmarks[1] else np.zeros(21*3)\n    else:\n      lh = np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten() if results.multi_hand_landmarks[0] else np.zeros(21*3)\n      rh = np.zeros(21*3)\n    return np.concatenate([ lh, rh])\ndef save_landmarks(landmarks,  path, intervention, trial):",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "directory",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "directory = './datasets/oxygen-bvm'\n# directory = './datasets/defib_pads_attachment'\nintervention = 'oxygen-bvm'\n# intervention = 'defib-pads'\nroot_path = f'./processed_data/'\nwith mp_hands.Hands(\n    model_complexity=0,\n    min_detection_confidence=0.5,\n    max_num_hands=2,\n    min_tracking_confidence=0.5) as hands:",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "intervention",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "intervention = 'oxygen-bvm'\n# intervention = 'defib-pads'\nroot_path = f'./processed_data/'\nwith mp_hands.Hands(\n    model_complexity=0,\n    min_detection_confidence=0.5,\n    max_num_hands=2,\n    min_tracking_confidence=0.5) as hands:\n# with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:\n  # model = holistic",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "root_path",
        "kind": 5,
        "importPath": "video_datagen",
        "description": "video_datagen",
        "peekOfCode": "root_path = f'./processed_data/'\nwith mp_hands.Hands(\n    model_complexity=0,\n    min_detection_confidence=0.5,\n    max_num_hands=2,\n    min_tracking_confidence=0.5) as hands:\n# with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:\n  # model = holistic\n  model = hands\n  # iterate over files in",
        "detail": "video_datagen",
        "documentation": {}
    },
    {
        "label": "directory",
        "kind": 5,
        "importPath": "video_generator",
        "description": "video_generator",
        "peekOfCode": "directory = './datasets/oxygen-bvm'\nimgs=[]\nheight = 480\nwidth = 640\nfor trial,filename in enumerate(sorted(glob.iglob(f'{directory}/**/videodata/', recursive=True))):\n    print(filename)\n    imgs = []\n    for frame,imagepath in enumerate(sorted(glob.iglob(f'{filename}/**/*original.jpg', recursive=True),key=os.path.getmtime)):\n        imgs.append(cv2.rotate(cv2.imread(imagepath),cv2.ROTATE_180))\n    out = cv2.VideoWriter(f'{filename}newvideo.avi',cv2.VideoWriter_fourcc(*'DIVX'), 25, (width,height))",
        "detail": "video_generator",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "video_generator",
        "description": "video_generator",
        "peekOfCode": "height = 480\nwidth = 640\nfor trial,filename in enumerate(sorted(glob.iglob(f'{directory}/**/videodata/', recursive=True))):\n    print(filename)\n    imgs = []\n    for frame,imagepath in enumerate(sorted(glob.iglob(f'{filename}/**/*original.jpg', recursive=True),key=os.path.getmtime)):\n        imgs.append(cv2.rotate(cv2.imread(imagepath),cv2.ROTATE_180))\n    out = cv2.VideoWriter(f'{filename}newvideo.avi',cv2.VideoWriter_fourcc(*'DIVX'), 25, (width,height))\n    for i in range(len(imgs)):\n        out.write(imgs[i])",
        "detail": "video_generator",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "video_generator",
        "description": "video_generator",
        "peekOfCode": "width = 640\nfor trial,filename in enumerate(sorted(glob.iglob(f'{directory}/**/videodata/', recursive=True))):\n    print(filename)\n    imgs = []\n    for frame,imagepath in enumerate(sorted(glob.iglob(f'{filename}/**/*original.jpg', recursive=True),key=os.path.getmtime)):\n        imgs.append(cv2.rotate(cv2.imread(imagepath),cv2.ROTATE_180))\n    out = cv2.VideoWriter(f'{filename}newvideo.avi',cv2.VideoWriter_fourcc(*'DIVX'), 25, (width,height))\n    for i in range(len(imgs)):\n        out.write(imgs[i])\n    out.release()",
        "detail": "video_generator",
        "documentation": {}
    }
]